name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    name: Test & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: foodflow_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Generate test JWT secrets
      run: node generate-secrets.js

    - name: Setup test environment
      run: |
        # Create .env file with test values for CI
        cat > .env << EOF
        # Database Configuration
        POSTGRES_USER=postgres
        POSTGRES_PASSWORD=postgres
        POSTGRES_DB=foodflow_test
        
        # JWT Configuration (test values for CI)
        JWT_SECRET=test_jwt_secret_for_ci_testing_only_minimum_32_characters_long
        JWT_REFRESH_SECRET=test_jwt_refresh_secret_for_ci_testing_only_minimum_32_chars
        
        # Redis Configuration
        REDIS_PASSWORD=
        
        # Application Configuration
        NODE_ENV=test
        FRONTEND_URL=http://localhost:5173
        BACKEND_PORT=3001
        
        # Test Database URL
        DATABASE_URL=postgresql://postgres:postgres@localhost:5432/foodflow_test
        REDIS_URL=redis://localhost:6379
        EOF

    # Backend Tests
    - name: Install backend dependencies
      run: |
        cd backend
        npm ci

    - name: Backend TypeScript check
      run: |
        cd backend
        npm run typecheck

    - name: Backend linting
      run: |
        cd backend
        npm run lint

    - name: Backend tests
      run: |
        cd backend
        npm test
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/foodflow_test
        REDIS_URL: redis://localhost:6379

    # Frontend Tests
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci

    - name: Frontend TypeScript check
      run: |
        cd frontend
        npm run typecheck

    - name: Frontend linting
      run: |
        cd frontend
        npm run lint

    - name: Frontend tests
      run: |
        cd frontend
        npm test

    - name: Frontend build
      run: |
        cd frontend
        npm run build

    # Security Checks
    - name: Backend security audit
      run: |
        cd backend
        npm audit --audit-level moderate
      continue-on-error: true

    - name: Frontend security audit
      run: |
        cd frontend
        npm audit --audit-level moderate
      continue-on-error: true

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: false
        tags: foodflow-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend image  
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: false
        tags: foodflow-frontend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to VPS
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        script: |
          cd /opt/foodflow-demo
          git pull origin main
          
          # Update environment with secrets
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" > .env
          echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> .env
          echo "DATABASE_URL=postgresql://postgres:${{ secrets.DB_PASSWORD }}@postgres:5432/foodflow" >> .env
          echo "REDIS_URL=redis://redis:6379" >> .env
          echo "NODE_ENV=production" >> .env
          echo "PORT=3001" >> .env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env
          
          # Deploy with zero downtime
          docker-compose pull
          docker-compose up -d --remove-orphans
          
          # Health check
          sleep 30
          curl -f http://localhost:3001/health || exit 1
          
          # Cleanup old images
          docker image prune -f

    - name: Deployment notification
      if: success()
      run: |
        echo "✅ Deployment successful!"
        echo "Demo available at: ${{ secrets.FRONTEND_URL }}"

    - name: Deployment failure notification
      if: failure()
      run: |
        echo "❌ Deployment failed!"
        exit 1